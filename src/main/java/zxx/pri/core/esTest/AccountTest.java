package zxx.pri.core.esTest;import io.searchbox.client.http.JestHttpClient;import io.searchbox.core.Search;import io.searchbox.core.SearchResult;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.TermQueryBuilder;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.sort.SortOrder;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import java.io.IOException;import java.util.List;/** * @author Twilight * @desc es操作学习 * @createTime 2019-10-17-20:05 */@SpringBootTest@RunWith(SpringJUnit4ClassRunner.class)public class AccountTest {    private final Logger log = LoggerFactory.getLogger(this.getClass());    @Autowired    private JestHttpClient jestHttpClient;    //查询account数据 query    @Test    public void accountList() throws IOException {//        String query = "{\"query\":{\"bool\":{\"must\":[{\"prefix\":{\"email\":\"com\"}}],\"must_not\":[],\"should\":[]}},\"from\":0,\"size\":30,\"sort\":[],\"aggs\":{}}\n";        String query = "{\n" +                "  \"query\": {\n" +                "    \"term\": {\n" +                "      \"gender\": {\n" +                "        \"value\": \"F\",\n" +                "        \"boost\": 1\n" +                "      }\n" +                "    }\n" +                "  },\n" +                "  \"sort\": [\n" +                "    {\n" +                "      \"account_number\": {\n" +                "        \"order\": \"asc\"\n" +                "      }\n" +                "    }\n" +                "  ]\n" +                "}";        Search search = new Search.Builder(query)                // multiple index or types can be added.                .addIndex("userinfo")                .addType("account")                .build();        SearchResult result = jestHttpClient.execute(search);        this.printResult(result);    }    @Test    public void searchSourceTest() throws IOException {        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()                .query(new BoolQueryBuilder()                        .must(new TermQueryBuilder("gender", "F")))                .sort("account_number", SortOrder.ASC);        System.out.println(searchSourceBuilder.toString());        Search search = new Search.Builder(searchSourceBuilder.toString()).addIndex("userinfo")                .addType("account").build();        SearchResult result = jestHttpClient.execute(search);        this.printResult(result);    }    private void printResult(SearchResult result) {        if (!result.isSucceeded()) {            log.error("异常{}", result.getErrorMessage());        } else {            log.warn("total:{}", result.getTotal());            List<SearchResult.Hit<Account, Void>> hits = result.getHits(Account.class);            hits.stream().forEach(accountVoidHit -> log.warn(accountVoidHit.source.toString()));        }    }}